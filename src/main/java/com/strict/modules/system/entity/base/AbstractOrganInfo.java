/**
 *@Generated by sagacity-quickvo 4.18
 */
package com.strict.modules.system.entity.base;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.sagacity.sqltoy.callback.SelectFields;
import org.sagacity.sqltoy.config.annotation.Column;
import org.sagacity.sqltoy.config.annotation.Entity;
import org.sagacity.sqltoy.config.annotation.Id;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * @project sqltoy-strict
 * @version 1.0.0
 * Table: sys_organ_info,Remark:机构信息表  
 */
@ApiModel(value="OrganInfo",description="机构信息表")
@Entity(tableName="sys_organ_info",pk_constraint="PRIMARY")
public abstract class AbstractOrganInfo implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6919169752754598412L;
	
	/**
	 * jdbcType:VARCHAR
	 * 机构ID
	 */
	@ApiModelProperty(name="ORGAN_ID",value="机构ID",allowEmptyValue=false)
	@Id(strategy="generator",generator="org.sagacity.sqltoy.plugins.id.impl.DefaultIdGenerator")
	@Column(name="ORGAN_ID",length=22L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String organId;
	
	/**
	 * jdbcType:VARCHAR
	 * 机构名称
	 */
	@ApiModelProperty(name="ORGAN_NAME",value="机构名称",allowEmptyValue=false)
	@Column(name="ORGAN_NAME",length=100L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String organName;
	
	/**
	 * jdbcType:VARCHAR
	 * 机构代码
	 */
	@ApiModelProperty(name="ORGAN_CODE",value="机构代码",allowEmptyValue=false)
	@Column(name="ORGAN_CODE",length=20L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String organCode;
	
	/**
	 * jdbcType:VARCHAR
	 * 成本中心代码
	 */
	@ApiModelProperty(name="COST_NO",value="成本中心代码",allowEmptyValue=true)
	@Column(name="COST_NO",length=20L,type=java.sql.Types.VARCHAR,nullable=true)
	protected String costNo;
	
	/**
	 * jdbcType:VARCHAR
	 * 父机构ID
	 */
	@ApiModelProperty(name="ORGAN_PID",value="父机构ID",allowEmptyValue=false)
	@Column(name="ORGAN_PID",length=22L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String organPid;
	
	/**
	 * jdbcType:VARCHAR
	 * 节点路径
	 */
	@ApiModelProperty(name="NODE_ROUTE",value="节点路径",allowEmptyValue=true)
	@Column(name="NODE_ROUTE",length=200L,type=java.sql.Types.VARCHAR,nullable=true)
	protected String nodeRoute;
	
	/**
	 * jdbcType:DECIMAL
	 * 节点等级
	 */
	@ApiModelProperty(name="NODE_LEVEL",value="节点等级",allowEmptyValue=true)
	@Column(name="NODE_LEVEL",length=1L,type=java.sql.Types.INTEGER,nullable=true)
	protected Integer nodeLevel;
	
	/**
	 * jdbcType:DECIMAL
	 * 是否叶子节点
	 */
	@ApiModelProperty(name="IS_LEAF",value="是否叶子节点",allowEmptyValue=true)
	@Column(name="IS_LEAF",length=1L,type=java.sql.Types.INTEGER,nullable=true)
	protected Integer isLeaf;
	
	/**
	 * jdbcType:DECIMAL
	 * 显示顺序
	 */
	@ApiModelProperty(name="SHOW_INDEX",value="显示顺序",allowEmptyValue=false)
	@Column(name="SHOW_INDEX",length=8L,defaultValue="1",type=java.sql.Types.INTEGER,nullable=false)
	protected Integer showIndex;
	
	/**
	 * jdbcType:VARCHAR
	 * 创建人
	 */
	@ApiModelProperty(name="CREATE_BY",value="创建人",allowEmptyValue=false)
	@Column(name="CREATE_BY",length=22L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String createBy;
	
	/**
	 * jdbcType:DATETIME
	 * 创建时间
	 */
	@ApiModelProperty(name="CREATE_TIME",value="创建时间",allowEmptyValue=false)
	@Column(name="CREATE_TIME",length=19L,type=java.sql.Types.DATE,nullable=false)
	protected LocalDateTime createTime;
	
	/**
	 * jdbcType:VARCHAR
	 * 最后修改人
	 */
	@ApiModelProperty(name="UPDATE_BY",value="最后修改人",allowEmptyValue=false)
	@Column(name="UPDATE_BY",length=22L,type=java.sql.Types.VARCHAR,nullable=false)
	protected String updateBy;
	
	/**
	 * jdbcType:DATETIME
	 * 最后修改时间
	 */
	@ApiModelProperty(name="UPDATE_TIME",value="最后修改时间",allowEmptyValue=false)
	@Column(name="UPDATE_TIME",length=19L,type=java.sql.Types.DATE,nullable=false)
	protected LocalDateTime updateTime;
	
	/**
	 * jdbcType:DECIMAL
	 * 状态
	 */
	@ApiModelProperty(name="STATUS",value="状态",allowEmptyValue=false)
	@Column(name="STATUS",length=1L,defaultValue="1",type=java.sql.Types.INTEGER,nullable=false)
	protected Integer status;
	

	/** default constructor */
	public AbstractOrganInfo() {
	}
	
	/** pk constructor */
	public AbstractOrganInfo(String organId)
	{
		this.organId=organId;
	}

	
	/**
	 *@param organId the organId to set
	 */
	public AbstractOrganInfo setOrganId(String organId) {
		this.organId=organId;
		return this;
	}
		
	/**
	 *@return the OrganId
	 */
	public String getOrganId() {
	    return this.organId;
	}
	
	/**
	 *@param organName the organName to set
	 */
	public AbstractOrganInfo setOrganName(String organName) {
		this.organName=organName;
		return this;
	}
		
	/**
	 *@return the OrganName
	 */
	public String getOrganName() {
	    return this.organName;
	}
	
	/**
	 *@param organCode the organCode to set
	 */
	public AbstractOrganInfo setOrganCode(String organCode) {
		this.organCode=organCode;
		return this;
	}
		
	/**
	 *@return the OrganCode
	 */
	public String getOrganCode() {
	    return this.organCode;
	}
	
	/**
	 *@param costNo the costNo to set
	 */
	public AbstractOrganInfo setCostNo(String costNo) {
		this.costNo=costNo;
		return this;
	}
		
	/**
	 *@return the CostNo
	 */
	public String getCostNo() {
	    return this.costNo;
	}
	
	/**
	 *@param organPid the organPid to set
	 */
	public AbstractOrganInfo setOrganPid(String organPid) {
		this.organPid=organPid;
		return this;
	}
		
	/**
	 *@return the OrganPid
	 */
	public String getOrganPid() {
	    return this.organPid;
	}
	
	/**
	 *@param nodeRoute the nodeRoute to set
	 */
	public AbstractOrganInfo setNodeRoute(String nodeRoute) {
		this.nodeRoute=nodeRoute;
		return this;
	}
		
	/**
	 *@return the NodeRoute
	 */
	public String getNodeRoute() {
	    return this.nodeRoute;
	}
	
	/**
	 *@param nodeLevel the nodeLevel to set
	 */
	public AbstractOrganInfo setNodeLevel(Integer nodeLevel) {
		this.nodeLevel=nodeLevel;
		return this;
	}
		
	/**
	 *@return the NodeLevel
	 */
	public Integer getNodeLevel() {
	    return this.nodeLevel;
	}
	
	/**
	 *@param isLeaf the isLeaf to set
	 */
	public AbstractOrganInfo setIsLeaf(Integer isLeaf) {
		this.isLeaf=isLeaf;
		return this;
	}
		
	/**
	 *@return the IsLeaf
	 */
	public Integer getIsLeaf() {
	    return this.isLeaf;
	}
	
	/**
	 *@param showIndex the showIndex to set
	 */
	public AbstractOrganInfo setShowIndex(Integer showIndex) {
		this.showIndex=showIndex;
		return this;
	}
		
	/**
	 *@return the ShowIndex
	 */
	public Integer getShowIndex() {
	    return this.showIndex;
	}
	
	/**
	 *@param createBy the createBy to set
	 */
	public AbstractOrganInfo setCreateBy(String createBy) {
		this.createBy=createBy;
		return this;
	}
		
	/**
	 *@return the CreateBy
	 */
	public String getCreateBy() {
	    return this.createBy;
	}
	
	/**
	 *@param createTime the createTime to set
	 */
	public AbstractOrganInfo setCreateTime(LocalDateTime createTime) {
		this.createTime=createTime;
		return this;
	}
		
	/**
	 *@return the CreateTime
	 */
	public LocalDateTime getCreateTime() {
	    return this.createTime;
	}
	
	/**
	 *@param updateBy the updateBy to set
	 */
	public AbstractOrganInfo setUpdateBy(String updateBy) {
		this.updateBy=updateBy;
		return this;
	}
		
	/**
	 *@return the UpdateBy
	 */
	public String getUpdateBy() {
	    return this.updateBy;
	}
	
	/**
	 *@param updateTime the updateTime to set
	 */
	public AbstractOrganInfo setUpdateTime(LocalDateTime updateTime) {
		this.updateTime=updateTime;
		return this;
	}
		
	/**
	 *@return the UpdateTime
	 */
	public LocalDateTime getUpdateTime() {
	    return this.updateTime;
	}
	
	/**
	 *@param status the status to set
	 */
	public AbstractOrganInfo setStatus(Integer status) {
		this.status=status;
		return this;
	}
		
	/**
	 *@return the Status
	 */
	public Integer getStatus() {
	    return this.status;
	}



	/**
     * @todo vo columns to String
     */
    @Override
	public String toString() {
		StringBuilder columnsBuffer=new StringBuilder();
		columnsBuffer.append("organId=").append(getOrganId()).append("\n");
		columnsBuffer.append("organName=").append(getOrganName()).append("\n");
		columnsBuffer.append("organCode=").append(getOrganCode()).append("\n");
		columnsBuffer.append("costNo=").append(getCostNo()).append("\n");
		columnsBuffer.append("organPid=").append(getOrganPid()).append("\n");
		columnsBuffer.append("nodeRoute=").append(getNodeRoute()).append("\n");
		columnsBuffer.append("nodeLevel=").append(getNodeLevel()).append("\n");
		columnsBuffer.append("isLeaf=").append(getIsLeaf()).append("\n");
		columnsBuffer.append("showIndex=").append(getShowIndex()).append("\n");
		columnsBuffer.append("createBy=").append(getCreateBy()).append("\n");
		columnsBuffer.append("createTime=").append(getCreateTime()).append("\n");
		columnsBuffer.append("updateBy=").append(getUpdateBy()).append("\n");
		columnsBuffer.append("updateTime=").append(getUpdateTime()).append("\n");
		columnsBuffer.append("status=").append(getStatus()).append("\n");
		return columnsBuffer.toString();
	}
	
	/**
	 * @TODO create entityQuery fields
	 */
	public static SelectFieldsImpl select() {
		return new SelectFieldsImpl();
	}
	
	public static class SelectFieldsImpl extends SelectFields {
		private List<String> fields = new ArrayList<String>();

		@Override
		public String[] getSelectFields() {
			String[] result = new String[fields.size()];
			fields.toArray(result);
			return result;
		}
		
	    public SelectFieldsImpl organId() {
	    	if (!fields.contains("organId")) {
				fields.add("organId");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl organName() {
	    	if (!fields.contains("organName")) {
				fields.add("organName");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl organCode() {
	    	if (!fields.contains("organCode")) {
				fields.add("organCode");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl costNo() {
	    	if (!fields.contains("costNo")) {
				fields.add("costNo");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl organPid() {
	    	if (!fields.contains("organPid")) {
				fields.add("organPid");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl nodeRoute() {
	    	if (!fields.contains("nodeRoute")) {
				fields.add("nodeRoute");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl nodeLevel() {
	    	if (!fields.contains("nodeLevel")) {
				fields.add("nodeLevel");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl isLeaf() {
	    	if (!fields.contains("isLeaf")) {
				fields.add("isLeaf");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl showIndex() {
	    	if (!fields.contains("showIndex")) {
				fields.add("showIndex");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl createBy() {
	    	if (!fields.contains("createBy")) {
				fields.add("createBy");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl createTime() {
	    	if (!fields.contains("createTime")) {
				fields.add("createTime");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl updateBy() {
	    	if (!fields.contains("updateBy")) {
				fields.add("updateBy");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl updateTime() {
	    	if (!fields.contains("updateTime")) {
				fields.add("updateTime");
			}
	    	return this;
	    }
    
	    public SelectFieldsImpl status() {
	    	if (!fields.contains("status")) {
				fields.add("status");
			}
	    	return this;
	    }
    
	}
}
